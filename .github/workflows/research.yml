name: research

on:
  workflow_dispatch:
    inputs:
      user_prompt:
        description: "What to research (free text)"
        required: true
        default: "Market analysis: meditation apps and doomscrolling"
      report_type:
        description: "auto|market|competitor|trend|sentiment|ideation|faq"
        required: true
        default: "auto"
      max_subs:
        description: "Max subreddits"
        required: true
        default: "8"
      months:
        description: "Default months (planner may override)"
        required: true
        default: "12"
      min_upvotes:
        description: "Default min upvotes"
        required: true
        default: "20"
      limit:
        description: "Default per-subreddit cap"
        required: true
        default: "1000"
      keywords:
        description: "Optional keyword filter"
        required: false
        default: ""

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r pipeline/requirements.txt

      - name: Plan (LLM or heuristic)
        env:
          USER_PROMPT: ${{ github.event.inputs.user_prompt }}
          REPORT_TYPE: ${{ github.event.inputs.report_type }}
          MAX_SUBS: ${{ github.event.inputs.max_subs }}
          MONTHS: ${{ github.event.inputs.months }}
          MIN_UPVOTES: ${{ github.event.inputs.min_upvotes }}
          LIMIT: ${{ github.event.inputs.limit }}
          KEYWORDS: ${{ github.event.inputs.keywords }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        run: |
          mkdir -p data reports public
          python pipeline/llm_planner.py \
            --prompt "${USER_PROMPT}" \
            --report-type "${REPORT_TYPE}" \
            --max-subs ${MAX_SUBS} \
            --default-months ${MONTHS} \
            --default-min-upvotes ${MIN_UPVOTES} \
            --default-limit ${LIMIT} \
            --keywords "${KEYWORDS}" \
            --out data/plan.json

          SUBS=$(python -c "import json;print(' '.join(json.load(open('data/plan.json'))['subreddits']))")
          MONTHS_P=$(python -c "import json;print(json.load(open('data/plan.json'))['params']['months'])")
          MIN_UPVOTES_P=$(python -c "import json;print(json.load(open('data/plan.json'))['params']['min_upvotes'])")
          LIMIT_P=$(python -c "import json;print(json.load(open('data/plan.json'))['params']['limit'])")
          REPORT_TYPE_P=$(python -c "import json;print(json.load(open('data/plan.json'))['report_type'])")

          echo "SUBS=${SUBS}" >> $GITHUB_ENV
          echo "MONTHS=${MONTHS_P}" >> $GITHUB_ENV
          echo "MIN_UPVOTES=${MIN_UPVOTES_P}" >> $GITHUB_ENV
          echo "LIMIT=${LIMIT_P}" >> $GITHUB_ENV
          echo "REPORT_TYPE=${REPORT_TYPE_P}" >> $GITHUB_ENV
          # NOTE: keywords filtresini ÅŸimdilik export etmiyoruz

      - name: Scrape
        env:
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        run: |
          echo "Planned subreddits: ${SUBS}"
          python pipeline/scrape_reddit.py \
            --subs ${SUBS} \
            --months ${MONTHS} \
            --min-upvotes ${MIN_UPVOTES} \
            --limit ${LIMIT} \
            --out data/raw.jsonl

      - name: Quick count
        run: |
          echo "JSONL lines:"
          wc -l data/raw.jsonl || true
          echo "First 3 lines:"
          head -n 3 data/raw.jsonl || true

      - name: Keyword filter (optional)
        if: ${{ github.event.inputs.keywords != '' }}
        run: |
          python pipeline/filter_keywords.py \
            --in data/raw.jsonl \
            --out data/raw.jsonl \
            --keywords ${{ github.event.inputs.keywords }}




      - name: Analyze
        run: |
          python pipeline/analyze.py \
            --in data/raw.jsonl \
            --out data/analysis.parquet \
            --report reports/pain_map.md

      - name: Build report
        run: |
          python pipeline/build_report_dynamic.py \
            --plan data/plan.json \
            --pain-map reports/pain_map.md \
            --analysis data/analysis.parquet \
            --out public/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
